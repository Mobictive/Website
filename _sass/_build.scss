@mixin t( $args... ){
  -webkit-transition: $args;
     -moz-transition: $args;
          transition: $args;
}

@mixin tf( $args... ){
  -webkit-transform: $args;
     -moz-transform: $args;
          transform: $args;
}

@mixin shadow( $args... ){
  -webkit-box-shadow: $args;
     -moz-box-shadow: $args;
          box-shadow: $args;
}

@mixin r( $args ){
  -webkit-border-radius: $args;
     -moz-border-radius: $args;
          border-radius: $args;
}

@mixin o( $args ){
  $ie: $args * 100;
  opacity: $args;
  filter: alpha(opacity=$ie);
}

// REM SCSS.
$baseFontsize: 16;
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value / 16}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 

  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

@function rem($value) {
  @return #{$value / $baseFontsize * 1}rem;
}

@function per($value) {
  @return percentage($value);
}


// sass --watch _style.scss:style.css --style expanded

// percentage

// Colors
$background: #ffffff;

$white: #ffffff;

$main: #2a2222;

$text: #5F6368;

$accent: #ff6600;

$secondary: #1e2856;

$border: #e2e2e2;